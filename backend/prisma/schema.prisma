// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String          @id @default(uuid())
  email       String          @unique
  password    String
  documents   Document[]
  sharedDocs  DocumentShare[]
  invitations Invitation[]    @relation("InvitedUser") // Only this is needed
}

model Document {
  id          String          @id @default(uuid())
  title       String
  type        String          @default("document") // "document"
  owner       User            @relation(fields: [ownerId], references: [id])
  ownerId     String
  pages       Page[]
  shares      DocumentShare[]
  invitations Invitation[]    @relation("InvitedDocument")
}

model Invitation {
  id         String   @id @default(uuid())
  document   Document @relation("InvitedDocument", fields: [documentId], references: [id])
  documentId String

  invitedUser   User?   @relation("InvitedUser", fields: [invitedUserId], references: [id])
  invitedUserId String?

  email     String
  token     String   @unique
  accepted  Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Page {
  id         String   @id @default(uuid())
  document   Document @relation(fields: [documentId], references: [id])
  documentId String
  pageIndex  Int
  content    String

  @@unique([documentId, pageIndex])
}

model DocumentShare {
  id         String   @id @default(uuid())
  document   Document @relation(fields: [documentId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  documentId String
  userId     String
  accepted   Boolean  @default(false)

  @@unique([documentId, userId])
}
